Abstraction is a process of hiding the implementation details and showing only functionality to the user.
Another way, it shows only essential things to the user and hides the internal details.
Abstraction lets you focus on what the object does instead of how it does it.

Ways to achieve Abstraction
There are two ways to achieve abstraction in java:
Abstract class (0 to 100%)
Interface (100%)

Abstract class
A class which is declared as abstract is known as an abstract class.
It can have abstract and non-abstract methods. It needs to be extended and its method implemented.
It cannot be instantiated.

Points to Remember
An abstract class must be declared with an abstract keyword.
It can have abstract and non-abstract methods.
It cannot be instantiated.
It can have constructors and static methods also.
It can have final methods which will force the subclass not to change the body of the method.

Abstract Method in Java
A method which is declared as abstract and does not have implementation is known as an abstract method.

Rule: If there is an abstract method in a class, that class must be abstract.
Rule: If you are extending an abstract class that has an abstract method,
you must either provide the implementation of the method or make this class abstract.

Interface
An interface in Java is a blueprint of a class. It has static constants and abstract methods.
The interface in Java is a mechanism to achieve abstraction.
There can be only abstract methods in the Java interface, not method body.
It is used to achieve abstraction and multiple inheritance in Java.
In other words, you can say that interfaces can have abstract methods and variables. It cannot have a method body.
Java Interface also represents the IS-A relationship.
It cannot be instantiated just like the abstract class.
Since Java 8, we can have default and static methods in an interface.

Why use Java interface?
There are mainly three reasons to use interface. They are given below.

It is used to achieve abstraction.
By interface, we can support the functionality of multiple inheritance.
It can be used to achieve loose coupling.
Why use Java Interface
How to declare an interface?
An interface is declared by using the interface keyword.
It provides total abstraction; means all the methods in an interface are declared with the empty body,
and all the fields are public, static and final by default. A class that implements an interface must implement all the methods declared in the interface.

Internal addition by the compiler
The Java compiler adds public and abstract keywords before the interface method.
Moreover, it adds public, static and final keywords before data members.
In other words, Interface fields are public, static and final by default, and the methods are public and abstract.
A class extends another class, an interface extends another interface, but a class implements an interface.

Multiple inheritance in Java by interface
If a class implements multiple interfaces, or an interface extends multiple interfaces, it is known as multiple inheritance.
Multiple inheritance is not supported in the case of class because of ambiguity.
However, it is supported in case of an interface because there is no ambiguity.
It is because its implementation is provided by the implementation class.

Interface inheritance
A class implements an interface, but one interface extends another interface.

An interface which has no member is known as a marker or tagged interface, for example, Serializable, Cloneable, Remote, etc.
They are used to provide some essential information to the JVM so that JVM may perform some useful operation.